import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from googletrans import Translator, LANGUAGES

BOT_TOKEN = "7837219498:AAE-KLppZJQlv4u2tIgyVBENT6Fi-JEFw3A"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

CHOOSING_DIRECTION, TRANSLATING = range(2)
RU_TO_EN = "–° —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π üá∑üá∫‚û°Ô∏èüá¨üáß"
EN_TO_RU = "–° –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá¨üáß‚û°Ô∏èüá∑üá∫"

translator_instance = None


async def initialize_translator_if_needed():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π translator_instance."""
    global translator_instance
    if translator_instance is not None:
        try:
            await translator_instance.translate("a", src='en', dest='ru')
            logger.info("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä Translator —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            return
        except Exception as e:
            logger.warning(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä Translator –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ({e}). –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
            translator_instance = None

    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Googletrans Translator...")
    try:
        temp_translator = Translator()
        test_result = await temp_translator.translate("test", src='en', dest='ru')
        if hasattr(test_result, 'text') and test_result.text:
            translator_instance = temp_translator
            logger.info("Googletrans Translator —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω.")
        else:
            logger.error("–ü—Ä–æ–±–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞).")
            translator_instance = None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Googletrans Translator: {e}.")
        translator_instance = None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await initialize_translator_if_needed()

    reply_keyboard = [[RU_TO_EN], [EN_TO_RU]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return CHOOSING_DIRECTION


async def set_translation_direction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_choice = update.message.text
    user_id = update.effective_user.id

    if user_choice == RU_TO_EN:
        context.user_data['source_lang'] = 'ru'
        context.user_data['dest_lang'] = 'en'
        chosen_direction_text = "—Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
    elif user_choice == EN_TO_RU:
        context.user_data['source_lang'] = 'en'
        context.user_data['dest_lang'] = 'ru'
        chosen_direction_text = "–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return await start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ

    logger.info(f"User {user_id} –≤—ã–±—Ä–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {chosen_direction_text}")
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å {chosen_direction_text}. "
        "–ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start.",
        reply_markup=ReplyKeyboardRemove()
    )
    return TRANSLATING


async def translate_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_text = update.message.text
    user_id = update.effective_user.id
    source_lang = context.user_data.get('source_lang')
    dest_lang = context.user_data.get('dest_lang')

    if not source_lang or not dest_lang:
        await update.message.reply_text(
            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        )
        return CHOOSING_DIRECTION

    if translator_instance is None:
        logger.warning("Translator –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–æ–º–∞–Ω–¥—ã /translate. –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...")
        await initialize_translator_if_needed()
        if translator_instance is None:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return TRANSLATING

    try:
        translation_result = await translator_instance.translate(user_text, src=source_lang, dest=dest_lang)

        if not hasattr(translation_result, 'text') or not translation_result.text:
            logger.error(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'text' –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç: {translation_result}")
            raise AttributeError("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'text' –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç")

        translated_text = translation_result.text

        detected_lang_code = translation_result.src if translation_result.src else source_lang
        detected_lang_name = LANGUAGES.get(detected_lang_code.lower(),
                                           detected_lang_code) if detected_lang_code else source_lang

        logger.info(
            f"User {user_id} sent '{user_text}' (detected: {detected_lang_name}). Translated to '{dest_lang}': '{translated_text}'")
        await update.message.reply_text(
            f"–ü–µ—Ä–µ–≤–æ–¥ ({detected_lang_name} -> {LANGUAGES.get(dest_lang, dest_lang)}):\n{translated_text}")

    except AttributeError as ae:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –¥–ª—è user {user_id}: {ae}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è user {user_id}: {e}\n–¢–µ–∫—Å—Ç: {user_text}")
        await initialize_translator_if_needed()
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ. –°–µ—Ä–≤–∏—Å –º–æ–≥ –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        )

    return TRANSLATING


async def stop_translation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    logger.info(f"User {user_id} stopped translation session.")
    await update.message.reply_text(
        "–°–µ—Å—Å–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π /start.",
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data.clear()
    return ConversationHandler.END


def main():
    if BOT_TOKEN == "YOUR_ACTUAL_BOT_TOKEN" or not BOT_TOKEN:
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BOT_TOKEN.")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_DIRECTION: [
                MessageHandler(filters.Regex(f"^({RU_TO_EN}|{EN_TO_RU})$"), set_translation_direction),
            ],
            TRANSLATING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, translate_text),
                CommandHandler("start", start)
            ],
        },
        fallbacks=[CommandHandler("stop", stop_translation), CommandHandler("start", start)],
        per_message=False,
    )

    application.add_handler(conv_handler)

    logger.info("–ë–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    main()
