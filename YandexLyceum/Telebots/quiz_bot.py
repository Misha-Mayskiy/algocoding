import logging
import json
import random
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

BOT_TOKEN = "7837219498:AAE-KLppZJQlv4u2tIgyVBENT6Fi-JEFw3A"
QUIZ_FILE = "quiz_data.json"
QUESTIONS_PER_QUIZ = 10
ASKING_QUESTION = range(1)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


def load_quiz_data(filename: str) -> list:
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        if "test" in data and isinstance(data["test"], list):
            return data["test"]
        else:
            logger.error(f"–§–∞–π–ª {filename} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'test' –∏–ª–∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º.")
            return []
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {filename}.")
        return []


ALL_QUESTIONS = load_quiz_data(QUIZ_FILE)


def normalize_answer(text: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    return text.lower().strip()


async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not ALL_QUESTIONS:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    if len(ALL_QUESTIONS) < QUESTIONS_PER_QUIZ:
        logger.warning(f"–í —Ñ–∞–π–ª–µ –º–µ–Ω—å—à–µ {QUESTIONS_PER_QUIZ} –≤–æ–ø—Ä–æ—Å–æ–≤. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ.")
        context.user_data['quiz_questions'] = random.sample(ALL_QUESTIONS, len(ALL_QUESTIONS))
    else:
        context.user_data['quiz_questions'] = random.sample(ALL_QUESTIONS, QUESTIONS_PER_QUIZ)

    context.user_data['current_question_index'] = 0
    context.user_data['score'] = 0

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ {len(context.user_data['quiz_questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤. –£–¥–∞—á–∏!"
        "\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /stop."
    )
    return await ask_next_question(update, context)


async def ask_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    questions = context.user_data.get('quiz_questions', [])
    current_index = context.user_data.get('current_question_index', 0)

    if current_index < len(questions):
        question_data = questions[current_index]
        context.user_data['current_correct_answer'] = question_data['response']

        await update.message.reply_text(question_data['question'], reply_markup=ReplyKeyboardRemove())
        logger.info(f"User {update.effective_user.id} asking question {current_index + 1}: {question_data['question']}")
        return ASKING_QUESTION
    else:
        score = context.user_data.get('score', 0)
        total_questions = len(questions)
        await update.message.reply_text(
            f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total_questions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. üéâ"
            "\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? /start",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear()
        return ConversationHandler.END


async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text
    correct_answer = context.user_data.get('current_correct_answer')

    normalized_user_answer = normalize_answer(user_answer)
    normalized_correct_answer = normalize_answer(correct_answer)

    if normalized_user_answer == normalized_correct_answer:
        context.user_data['score'] = context.user_data.get('score', 0) + 1
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        logger.info(f"User {update.effective_user.id} answered correctly: '{user_answer}'")
    else:
        await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
        logger.info(
            f"User {update.effective_user.id} answered incorrectly: '{user_answer}'. Correct: '{correct_answer}'")

    context.user_data['current_question_index'] = context.user_data.get('current_question_index', 0) + 1
    return await ask_next_question(update, context)


async def stop_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    score = context.user_data.get('score', 0)
    answered_questions = context.user_data.get('current_question_index', 0)

    logger.info("User %s stopped the quiz.", user.first_name)
    await update.message.reply_text(
        f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {score} –∏–∑ {answered_questions} –≤–æ–ø—Ä–æ—Å–æ–≤."
        "\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END


def main() -> None:
    if BOT_TOKEN == "YOUR_ACTUAL_BOT_TOKEN" or not BOT_TOKEN:
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BOT_TOKEN.")
        return
    if not ALL_QUESTIONS:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ {QUIZ_FILE}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_quiz)],
        states={
            ASKING_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer)],
        },
        fallbacks=[CommandHandler("stop", stop_quiz), CommandHandler("start", start_quiz)],
        per_message=False,
    )

    application.add_handler(conv_handler)

    logger.info("–ë–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    main()
