import logging
import re
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

BOT_TOKEN = "7837219498:AAE-KLppZJQlv4u2tIgyVBENT6Fi-JEFw3A"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

POEM_LINES = [
    "–£ –ª—É–∫–æ–º–æ—Ä—å—è –¥—É–± –∑–µ–ª—ë–Ω—ã–π",
    "–ó–ª–∞—Ç–∞—è —Ü–µ–ø—å –Ω–∞ –¥—É–±–µ —Ç–æ–º:",
    "–ò –¥–Ω—ë–º –∏ –Ω–æ—á—å—é –∫–æ—Ç —É—á—ë–Ω—ã–π",
    "–í—Å—ë —Ö–æ–¥–∏—Ç –ø–æ —Ü–µ–ø–∏ –∫—Ä—É–≥–æ–º",
    "–ò–¥—ë—Ç –Ω–∞–ø—Ä–∞–≤–æ ‚Äî –ø–µ—Å–Ω—å –∑–∞–≤–æ–¥–∏—Ç,",
    "–ù–∞–ª–µ–≤–æ ‚Äî —Å–∫–∞–∑–∫—É –≥–æ–≤–æ—Ä–∏—Ç.",
    "–¢–∞–º —á—É–¥–µ—Å–∞: —Ç–∞–º –ª–µ—à–∏–π –±—Ä–æ–¥–∏—Ç,",
    "–†—É—Å–∞–ª–∫–∞ –Ω–∞ –≤–µ—Ç–≤—è—Ö —Å–∏–¥–∏—Ç",
    "–¢–∞–º –Ω–∞ –Ω–µ–≤–µ–¥–æ–º—ã—Ö –¥–æ—Ä–æ–∂–∫–∞—Ö",
    "–°–ª–µ–¥—ã –Ω–µ–≤–∏–¥–∞–Ω–Ω—ã—Ö –∑–≤–µ—Ä–µ–π",
    "–ò–∑–±—É—à–∫–∞ —Ç–∞–º –Ω–∞ –∫—É—Ä—å–∏—Ö –Ω–æ–∂–∫–∞—Ö",
    "–°—Ç–æ–∏—Ç –±–µ–∑ –æ–∫–æ–Ω, –±–µ–∑ –¥–≤–µ—Ä–µ–π",
    "–¢–∞–º –ª–µ—Å –∏ –¥–æ–ª –≤–∏–¥–µ–Ω–∏–π –ø–æ–ª–Ω—ã",
    "–¢–∞–º –æ –∑–∞—Ä–µ –ø—Ä–∏—Ö–ª—ã–Ω—É—Ç –≤–æ–ª–Ω—ã",
    "–ù–∞ –±—Ä–µ–≥ –ø–µ—Å—á–∞–Ω—ã–π –∏ –ø—É—Å—Ç–æ–π,",
    "–ò —Ç—Ä–∏–¥—Ü–∞—Ç—å –≤–∏—Ç—è–∑–µ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö",
    "–ß—Ä–µ–¥–æ–π –∏–∑ –≤–æ–¥ –≤—ã—Ö–æ–¥—è—Ç —è—Å–Ω—ã—Ö,",
    "–ò —Å –Ω–∏–º–∏ –¥—è–¥—å–∫–∞ –∏—Ö –º–æ—Ä—Å–∫–æ–π",
    "–¢–∞–º –∫–æ—Ä–æ–ª–µ–≤–∏—á –º–∏–º–æ—Ö–æ–¥–æ–º",
    "–ü–ª–µ–Ω—è–µ—Ç –≥—Ä–æ–∑–Ω–æ–≥–æ —Ü–∞—Ä—è",
    "–¢–∞–º –≤ –æ–±–ª–∞–∫–∞—Ö –ø–µ—Ä–µ–¥ –Ω–∞—Ä–æ–¥–æ–º",
    "–ß–µ—Ä–µ–∑ –ª–µ—Å–∞, —á–µ—Ä–µ–∑ –º–æ—Ä—è",
    "–ö–æ–ª–¥—É–Ω –Ω–µ—Å—ë—Ç –±–æ–≥–∞—Ç—ã—Ä—è",
    "–í —Ç–µ–º–Ω–∏—Ü–µ —Ç–∞–º —Ü–∞—Ä–µ–≤–Ω–∞ —Ç—É–∂–∏—Ç,",
    "–ê –±—É—Ä—ã–π –≤–æ–ª–∫ –µ–π –≤–µ—Ä–Ω–æ —Å–ª—É–∂–∏—Ç",
    "–¢–∞–º —Å—Ç—É–ø–∞ —Å –ë–∞–±–æ—é –Ø–≥–æ–π",
    "–ò–¥—ë—Ç, –±—Ä–µ–¥—ë—Ç —Å–∞–º–∞ —Å–æ–±–æ–π,",
    "–¢–∞–º —Ü–∞—Ä—å –ö–∞—â–µ–π –Ω–∞–¥ –∑–ª–∞—Ç–æ–º —á–∞—Ö–Ω–µ—Ç",
    "–¢–∞–º —Ä—É—Å—Å–∫–∏–π –¥—É—Ö... —Ç–∞–º –†—É—Å—å—é –ø–∞—Ö–Ω–µ—Ç!",
    "–ò —Ç–∞–º —è –±—ã–ª, –∏ –º—ë–¥ —è –ø–∏–ª",
    "–£ –º–æ—Ä—è –≤–∏–¥–µ–ª –¥—É–± –∑–µ–ª—ë–Ω—ã–π",
    "–ü–æ–¥ –Ω–∏–º —Å–∏–¥–µ–ª, –∏ –∫–æ—Ç —É—á—ë–Ω—ã–π",
    "–°–≤–æ–∏ –º–Ω–µ —Å–∫–∞–∑–∫–∏ –≥–æ–≤–æ—Ä–∏–ª."
]

READING_POEM, AWAITING_RETRY = range(2)


def normalize_text(text: str) -> str:
    text = text.lower()
    text = text.replace('—ë', '–µ')
    text = re.sub(r'[^\w\s]', '', text, flags=re.UNICODE)
    text = re.sub(r'\s+', ' ', text).strip()
    return text


async def start_poem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['current_line_index'] = 0
    context.user_data['last_bot_line'] = POEM_LINES[0]
    await update.message.reply_text(f"–î–∞–≤–∞–π –ø–æ—á–∏—Ç–∞–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ!\n\n–Ø –Ω–∞—á–Ω—É:\n{POEM_LINES[0]}")
    logger.info(f"User {update.effective_user.id} started poem. Bot said: {POEM_LINES[0]}")
    context.user_data['expected_line_index'] = 1
    return READING_POEM


async def check_line(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_text = update.message.text
    current_expected_index = context.user_data.get('expected_line_index')

    if current_expected_index is None or current_expected_index >= len(POEM_LINES):
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞? /start")
        return ConversationHandler.END

    expected_line_normalized = normalize_text(POEM_LINES[current_expected_index])
    user_line_normalized = normalize_text(user_text)

    if user_line_normalized == expected_line_normalized:
        logger.info(f"User {update.effective_user.id} correctly said: '{user_text}'")
        next_bot_line_index = current_expected_index + 1
        if next_bot_line_index < len(POEM_LINES):
            bot_reply = POEM_LINES[next_bot_line_index]
            await update.message.reply_text(bot_reply)
            context.user_data['last_bot_line'] = bot_reply
            context.user_data['expected_line_index'] = next_bot_line_index + 1
            return READING_POEM
        else:
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –≤—Å–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ! üéâ\n–•–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? /start")
            context.user_data.clear()
            return ConversationHandler.END
    else:
        logger.info(
            f"User {update.effective_user.id} made a mistake. Expected: '{POEM_LINES[current_expected_index]}', Got: '{user_text}'")
        reply_keyboard = [['/suphler', '/stop']]
        await update.message.reply_text(
            "–ù–µ—Ç, –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. \n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π /suphler.",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return AWAITING_RETRY


async def suphler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    current_expected_index = context.user_data.get('expected_line_index')
    if current_expected_index is not None and current_expected_index < len(POEM_LINES):
        expected_line = POEM_LINES[current_expected_index]
        await update.message.reply_text(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ¬´{expected_line}¬ª")
        logger.info(f"User {update.effective_user.id} used suphler. Hint: {expected_line}")
        reply_keyboard = [['/stop']]
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É.",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return AWAITING_RETRY
    else:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏. –ú–æ–∂–µ—Ç, –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞? /start")
        return ConversationHandler.END


async def stop_poem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("User %s stopped reading the poem.", user.first_name)
    await update.message.reply_text(
        "–ß—Ç–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ. –ñ–∞–ª—å! –ú–æ–∂–µ—Ç, –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑? /start", reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END


def main() -> None:
    if BOT_TOKEN == "YOUR_ACTUAL_BOT_TOKEN" or not BOT_TOKEN:
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BOT_TOKEN.")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_poem)],
        states={
            READING_POEM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, check_line),
            ],
            AWAITING_RETRY: [
                CommandHandler("suphler", suphler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, check_line),
            ]
        },
        fallbacks=[CommandHandler("stop", stop_poem), CommandHandler("start", start_poem)],
        per_message=False,
    )

    application.add_handler(conv_handler)

    logger.info("–ë–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∏—Ö–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    main()
